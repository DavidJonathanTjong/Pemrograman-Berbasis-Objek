/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package formAksi;

import com.formdev.flatlaf.FlatClientProperties;
import com.formdev.flatlaf.FlatLaf;
import com.formdev.flatlaf.themes.FlatMacDarkLaf;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import koneksidatabase.Koneksi;
import raven.table.TableGradientCell;

/**
 *
 * @author USER
 */
public class DaftarItem extends javax.swing.JFrame {

    /**
     * Creates new form DaftarItem
     */
    private static Connection con;

    public DaftarItem() {
        initComponents();
        tabelBarang.setDefaultRenderer(Object.class, new TableGradientCell());
        jPanel1.putClientProperty(FlatClientProperties.STYLE, ""
                + "border:1,1,1,1,$TableHeader.bottomSeparatorColor,,10");
        tabelBarang.getTableHeader().putClientProperty(FlatClientProperties.STYLE, ""
                + "hoverBackground:null;"
                + "pressedBackground:null;"
                + "separatorColor:$TableHeader.background");
        scroll.putClientProperty(FlatClientProperties.STYLE, ""
                + "border:3,0,3,0,$Table.background,10,10");
        scroll.getVerticalScrollBar().putClientProperty(FlatClientProperties.STYLE, ""
                + "hoverTrackColor:null");
        con = Koneksi.createKoneksi();
        inisialisasiTabel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        pencarianInputan = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        inpCarian = new javax.swing.JTextField();
        butCari = new button.MyButton();
        jLabel3 = new javax.swing.JLabel();
        listCari = new javax.swing.JComboBox<>();
        butTambah = new button.MyButton();
        butEdit = new button.MyButton();
        butDel = new button.MyButton();
        jPanel1 = new javax.swing.JPanel();
        scroll = new javax.swing.JScrollPane();
        tabelBarang = new javax.swing.JTable();
        myButton1 = new button.MyButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jLabel1.setText("---------------------PENCARIAN DAFTAR ITEM------------------");

        pencarianInputan.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setText("Masukan kata kunci :");
        pencarianInputan.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 160, 30));
        pencarianInputan.add(inpCarian, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 10, 510, 30));

        butCari.setForeground(new java.awt.Color(255, 255, 255));
        butCari.setText("Cari");
        butCari.setBorderColor(new java.awt.Color(255, 255, 255));
        butCari.setColor(new java.awt.Color(0, 0, 0));
        butCari.setColorClick(new java.awt.Color(102, 255, 102));
        butCari.setColorOver(new java.awt.Color(255, 0, 0));
        butCari.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butCariActionPerformed(evt);
            }
        });
        pencarianInputan.add(butCari, new org.netbeans.lib.awtextra.AbsoluteConstraints(710, 10, 60, 30));

        jLabel3.setText("Cari data pada :");
        pencarianInputan.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, -1, -1));

        listCari.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "kodeItem", "namaItem", "kodeBarcode" }));
        pencarianInputan.add(listCari, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 140, -1));

        butTambah.setBackground(new java.awt.Color(0, 0, 0));
        butTambah.setForeground(new java.awt.Color(255, 255, 255));
        butTambah.setText("Tambah");
        butTambah.setBorderColor(new java.awt.Color(255, 255, 255));
        butTambah.setColor(new java.awt.Color(0, 0, 0));
        butTambah.setColorClick(new java.awt.Color(204, 255, 51));
        butTambah.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butTambahActionPerformed(evt);
            }
        });

        butEdit.setBackground(new java.awt.Color(0, 0, 0));
        butEdit.setForeground(new java.awt.Color(255, 255, 255));
        butEdit.setText("Edit Data");
        butEdit.setBorderColor(new java.awt.Color(255, 255, 255));
        butEdit.setColor(new java.awt.Color(0, 0, 0));
        butEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butEditActionPerformed(evt);
            }
        });

        butDel.setBackground(new java.awt.Color(0, 0, 0));
        butDel.setForeground(new java.awt.Color(255, 255, 255));
        butDel.setText("Delete");
        butDel.setBorderColor(new java.awt.Color(255, 255, 255));
        butDel.setColor(new java.awt.Color(0, 0, 0));
        butDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butDelActionPerformed(evt);
            }
        });

        jPanel1.setLayout(new java.awt.BorderLayout());

        tabelBarang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Kode Item", "Kode Barcode", "Nama Item", "Stok", "Harga Jual", "Keterangan"
            }
        ));
        scroll.setViewportView(tabelBarang);

        jPanel1.add(scroll, java.awt.BorderLayout.CENTER);

        myButton1.setForeground(new java.awt.Color(255, 255, 255));
        myButton1.setText("EXIT");
        myButton1.setColor(new java.awt.Color(0, 0, 0));
        myButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(pencarianInputan, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 810, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(29, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(butTambah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addComponent(butEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(butDel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(myButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(62, 62, 62))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addGap(20, 20, 20)
                .addComponent(pencarianInputan, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butTambah, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(butEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(butDel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(myButton1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void inisialisasiTabel() {
        DefaultTableModel tmodel = (DefaultTableModel) tabelBarang.getModel();
        tmodel.setRowCount(0);
        tabelBarang.setAutoCreateRowSorter(true);
        try {
            Statement statement = con.createStatement();
            String sql = "SELECT kodeItem, kodeBarcode, namaItem, stok, hargajual, keterangan\n" + "FROM item;";
            ResultSet hasil = statement.executeQuery(sql);
            while (hasil.next()) {
                int kodeItem = hasil.getInt("kodeItem");
                String kodeBarcode = hasil.getString("kodeBarcode");
                String namaItem = hasil.getString("namaItem");
                int stok = hasil.getInt("stok");
                double hargaJual = hasil.getDouble("hargajual");
                String keterangan = hasil.getString("keterangan");
                ArrayList myItem = new ArrayList();
                myItem.add(kodeItem);
                myItem.add(kodeBarcode);
                myItem.add(namaItem);
                myItem.add(stok);
                myItem.add(hargaJual);
                myItem.add(keterangan);
                tmodel.addRow(myItem.toArray());
            }
            statement.close();
            hasil.close();
        } catch (SQLException ex) {
            System.out.println(ex + "ini eror");
        }
    }

    private void myButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton1ActionPerformed
        dispose();
    }//GEN-LAST:event_myButton1ActionPerformed

    private void butTambahActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butTambahActionPerformed
        tambahItem x = new tambahItem();
        x.setVisible(true);
    }//GEN-LAST:event_butTambahActionPerformed

    private void butEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butEditActionPerformed
        updateItem x = new updateItem();
        int row = tabelBarang.getSelectedRow();
        int value1 = Integer.parseInt(tabelBarang.getModel().getValueAt(row, 0).toString());
        String value2 = tabelBarang.getModel().getValueAt(row, 1).toString();
        String value3 = tabelBarang.getModel().getValueAt(row, 2).toString();
        int value4 = Integer.parseInt(tabelBarang.getModel().getValueAt(row, 3).toString());
        double value5 = Double.parseDouble(tabelBarang.getModel().getValueAt(row, 4).toString());
        String value6 = tabelBarang.getModel().getValueAt(row, 5).toString();
        x.setInput1(value1);
        x.setInput2(value2);
        x.setInput3(value3);
        x.setInput4(value4);
        x.setInput5(value5);
        x.setInput6(value6);
        x.setVisible(true);
    }//GEN-LAST:event_butEditActionPerformed

    private void butDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butDelActionPerformed
        int column = 0;
        int row = tabelBarang.getSelectedRow();
        String value = tabelBarang.getModel().getValueAt(row, column).toString();
        try {
            Statement statement = con.createStatement();
            String sql = "DELETE FROM `item` WHERE kodeItem = '" + value + "';";
            int hasil = statement.executeUpdate(sql);
            if(hasil>0){
                System.out.println("berhasil delete item");
            }
            inisialisasiTabel();
            statement.close();
        } catch (SQLException ex) {
            System.out.println(ex + "ini eror");
        }
    }//GEN-LAST:event_butDelActionPerformed

    private void butCariActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butCariActionPerformed
        DefaultTableModel tmodel = (DefaultTableModel) tabelBarang.getModel();
        if (inpCarian.getText().isEmpty()) {
            tmodel.setRowCount(0);
            inisialisasiTabel();
        } else {
            tabelBarang.setAutoCreateRowSorter(true);
            String key = inpCarian.getText();
            int pil = listCari.getSelectedIndex();
            if (pil == 0) {
                try {
                    int kode = Integer.parseInt(key);
                    String query = "SELECT kodeItem, kodeBarcode, namaItem, stok, hargajual, keterangan FROM item WHERE kodeItem = ?";
                    PreparedStatement preparedStatement = con.prepareStatement(query);
                    preparedStatement.setInt(1, kode);
                    ResultSet resultSet = preparedStatement.executeQuery();
                    tmodel.setRowCount(0);
                    while (resultSet.next()) {
                        int kodeItem = resultSet.getInt("kodeItem");
                        String kodeBarcode = resultSet.getString("kodeBarcode");
                        String namaItem = resultSet.getString("namaItem");
                        int stok = resultSet.getInt("stok");
                        double hargaJual = resultSet.getDouble("hargajual");
                        String keterangan = resultSet.getString("keterangan");
                        ArrayList myItem = new ArrayList();
                        myItem.add(kodeItem);
                        myItem.add(kodeBarcode);
                        myItem.add(namaItem);
                        myItem.add(stok);
                        myItem.add(hargaJual);
                        myItem.add(keterangan);
                        tmodel.addRow(myItem.toArray());
                    }
                } catch (SQLException ex) {
                    System.out.println("Gagal cari (1)");
                }
            } else if (pil == 1) {
                try {
                    String query = "SELECT kodeItem, kodeBarcode, namaItem, stok, hargajual, keterangan FROM item WHERE namaItem LIKE ?";
                    PreparedStatement preparedStatement = con.prepareStatement(query);
                    preparedStatement.setString(1, "%" + key + "%");
                    ResultSet resultSet = preparedStatement.executeQuery();
                    tmodel.setRowCount(0);
                    while (resultSet.next()) {
                        int kodeItem = resultSet.getInt("kodeItem");
                        String kodeBarcode = resultSet.getString("kodeBarcode");
                        String namaItem = resultSet.getString("namaItem");
                        int stok = resultSet.getInt("stok");
                        double hargaJual = resultSet.getDouble("hargajual");
                        String keterangan = resultSet.getString("keterangan");
                        ArrayList myItem = new ArrayList();
                        myItem.add(kodeItem);
                        myItem.add(kodeBarcode);
                        myItem.add(namaItem);
                        myItem.add(stok);
                        myItem.add(hargaJual);
                        myItem.add(keterangan);
                        tmodel.addRow(myItem.toArray());
                    }
                } catch (SQLException ex) {
                    System.out.println("Gagal cari (2)");
                }
            } else if (pil == 2) {
                try {
                    String query = "SELECT kodeItem, kodeBarcode, namaItem, stok, hargajual, keterangan FROM item WHERE kodeBarcode = ?";
                    PreparedStatement preparedStatement = con.prepareStatement(query);
                    preparedStatement.setString(1, key);
                    ResultSet resultSet = preparedStatement.executeQuery();
                    tmodel.setRowCount(0);
                    while (resultSet.next()) {
                        int kodeItem = resultSet.getInt("kodeItem");
                        String kodeBarcode = resultSet.getString("kodeBarcode");
                        String namaItem = resultSet.getString("namaItem");
                        int stok = resultSet.getInt("stok");
                        double hargaJual = resultSet.getDouble("hargajual");
                        String keterangan = resultSet.getString("keterangan");
                        ArrayList myItem = new ArrayList();
                        myItem.add(kodeItem);
                        myItem.add(kodeBarcode);
                        myItem.add(namaItem);
                        myItem.add(stok);
                        myItem.add(hargaJual);
                        myItem.add(keterangan);
                        tmodel.addRow(myItem.toArray());
                    }
                } catch (SQLException ex) {
                    System.out.println("Gagal cari (3)");
                }
            }
        }
    }//GEN-LAST:event_butCariActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DaftarItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DaftarItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DaftarItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DaftarItem.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        FlatLaf.registerCustomDefaultsSource("formAksi");
        FlatMacDarkLaf.setup();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DaftarItem().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private button.MyButton butCari;
    private button.MyButton butDel;
    private button.MyButton butEdit;
    private button.MyButton butTambah;
    private javax.swing.JTextField inpCarian;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JComboBox<String> listCari;
    private button.MyButton myButton1;
    private javax.swing.JPanel pencarianInputan;
    private javax.swing.JScrollPane scroll;
    private javax.swing.JTable tabelBarang;
    // End of variables declaration//GEN-END:variables
}
